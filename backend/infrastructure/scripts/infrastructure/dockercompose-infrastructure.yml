version: '3.8'

#zipkin, grafana, prometheus, postgres, redis, mongodb, minio services
services:

  zookeeper:
    image: bitnami/zookeeper:3.9.1
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - backend_net

  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka_broker
    ports:
      - "9092:9092"
    restart: always
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka_broker:9092
    depends_on:
      - zookeeper
    networks:
      - backend_net

  kafka-ui:
    image: docker.io/tchiotludo/akhq
    container_name: kafka-ui
    ports:
      - "60080:8080"
    volumes:
      - ./akhq.yml:/app/application.yml
    depends_on:
      - kafka
    networks:
      - backend_net

  zipkin:
    image: openzipkin/zipkin-slim:3.0.2
    container_name: zipkin_server
    ports:
      - "9411:9411"
    networks:
      - backend_net

  grafana:
    image: grafana/grafana:10.2.3-ubuntu
    container_name: grafana_server
    ports:
      - "3000:3000"
    volumes:
      - ../../data/grafana-data:/var/lib/grafana
    networks:
      - backend_net

  prometheus:
    image: bitnami/prometheus:2.48.1
    container_name: prometheus_server
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml:ro
      - ../../data/prometheus-data:/opt/bitnami/prometheus/data
    ports:
      - "9090:9090"
    networks:
      - backend_net

  postgres:
    image: postgres:16.1-alpine3.19
    container_name: postgres_db_server
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=qrestor
      - POSTGRES_PASSWORD=qrestor
      - POSTGRES_DB=qrestor_default_db
    volumes:
      - ../../data/postgres-data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    networks:
      - backend_net

  redis:
    image: redis:7.2.4-alpine3.19
    container_name: redis_cache_server
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass qrestor123 #login: default
    volumes:
      - ../../data/redis-data:/data
    networks:
      - backend_net

  mongodb:
    image: mongo:7.0.5
    container_name: mongodb_server
    environment:
      - MONGO_INITDB_ROOT_USERNAME=qrestor
      - MONGO_INITDB_ROOT_PASSWORD=qrestor123
      - MONGO_INITDB_DATABASE=qrestor_db
    volumes:
      - ../../data/mongodb-data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27017:27017"
    networks:
      - backend_net

  minio:
    image: bitnami/minio:2024.1.13
    container_name: minio_storage_server
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_SERVER_ACCESS_KEY=qrestor123qrestor123
      - MINIO_SERVER_SECRET_KEY=qrestor123qrestor123
      - MINIO_ROOT_USER=qrestor123
      - MINIO_ROOT_PASSWORD=qrestor123
      - MINIO_DEFAULT_BUCKETS=menu-items-pics, backgrounds, logos
      - MINIO_SCHEME=https
    volumes:
      - ../../data/minio-data:/bitnami/minio/data
      - ../../certs/minio:/certs
    networks:
      - backend_net

networks:
  backend_net:
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local